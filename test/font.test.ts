import { Font } from '../src/index'
import { fileLineIter } from '../src/bdfparser'
import { unifont_path, glyph_a_meta, missing_glyph_meta } from './info'

describe('Font loading', () => {
  let font

  beforeEach(() => {
    font = new Font()
  })

  test('load_file_path', async () => {
    expect(await font.load_file_path(unifont_path)).toBeInstanceOf(Font)
  })

  test('load_file_line_iter', async () => {
    const lineIter = fileLineIter(unifont_path)
    expect(await font.load_file_line_iter(lineIter)).toBeInstanceOf(Font)
  })
})

describe('Font', () => {
  let font

  beforeEach(() => {
    font = new Font()
    return font.load_file_path(unifont_path)
  })

  describe('basic', () => {
    test('init', () => {
      expect(font).toBeInstanceOf(Font)
    })

    test('headers', () => {
      expect(font.headers).toEqual({
        bdfversion: 2.1,
        fontname:
          '-gnu-Unifont-Medium-R-Normal-Sans-16-160-75-75-c-80-iso10646-1',
        pointsize: 16,
        xres: 75,
        yres: 75,
        fbbx: 16,
        fbby: 16,
        fbbxoff: 0,
        fbbyoff: -2,
        comment: [
          'Generated by fontforge, http://fontforge.sourceforge.net',
          '(C)Copyright',
        ],
        metricsset: 0,
      })
    })

    test('props', () => {
      expect(font.props).toEqual({
        add_style_name: 'Sans Serif',
        average_width: '80',
        cap_height: '10',
        charset_encoding: '1',
        charset_registry: 'ISO10646',
        copyright:
          'Copyright (C) 1998-2020 Roman Czyborra, Paul Hardy, Qianqian Fang, Andrew Miller, Johnnie Weaver, David Corbett, Rebecca Bettencourt, et al. License: SIL Open Font License version 1.1 and GPLv2+: GNU GPL version 2 or later <http://gnu.org/licenses/gpl.html> with the GNU Font Embedding Exception.',
        default_char: '65533',
        family_name: 'Unifont',
        font_ascent: '14',
        font_descent: '2',
        font_type: 'Bitmap',
        font_version: '13.0.04',
        foundry: 'GNU',
        pixel_size: '16',
        point_size: '160',
        resolution_x: '75',
        resolution_y: '75',
        setwidth_name: 'Normal',
        slant: 'R',
        spacing: 'C',
        underline_position: '-2',
        underline_thickness: '1',
        weight_name: 'Medium',
        x_height: '8',
      })
    })

    test('glyphs_a', () => {
      // prettier-ignore
      expect(font.glyphs.get(97)).toEqual([
        'U+0061', 97, 8, 16, 0, -2, 500, 0, 8, 0,
        null, null, null, null, null, null,
        ['00','00','00','00','00','00','3C','42','02','3E','42','42','46','3A','00','00'],
      ])
    })

    test('glyphs_len', () => {
      expect(font.glyphs.size).toEqual(font.length)
    })

    test('length', () => {
      expect(font.length).toBe(849)
    })
  })

  describe('iter', () => {
    test('itercps_list_len', () => {
      expect(font.itercps().length).toEqual(font.length)
    })

    test('itercps_cp_first', () => {
      expect(font.itercps()[0]).toEqual(0)
    })

    test('itercps_cp_reversed_first', () => {
      expect(font.itercps(2)[0]).toEqual(30340)
    })

    test('itercps_file_first', () => {
      expect(font.itercps(0)[0]).toEqual(1)
    })

    test('itercps_file_reversed_first', () => {
      expect(font.itercps(-1)[0]).toEqual(1790)
    })

    test('itercps_range', () => {
      const r128 = font.itercps(null, 128)
      const r0x100 = font.itercps(null, 0x100)
      expect(r128.length).toEqual(128)
      expect(r0x100.length).toEqual(256)
      expect(font.itercps(null, [0, 127])).toEqual(r128)
      expect(font.itercps(null, [0, 0xff])).toEqual(r0x100)
    })

    test('itercps_range2', () => {
      const r_numbers = font.itercps(null, [48, 57])
      const r_reversed_uppers = font.itercps(2, [65, 90])
      const r_letters_with_nonexistent_range = font.itercps(null, [
        [65, 90],
        [97, 122],
        [0x20000, 0x3134f],
      ])
      // prettier-ignore
      expect(r_numbers).toEqual([48, 49, 50, 51, 52, 53, 54, 55, 56, 57])
      // prettier-ignore
      expect(r_reversed_uppers).toEqual([90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65])
      // prettier-ignore
      expect(r_letters_with_nonexistent_range).toEqual([65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122])
    })
  })

  describe('get glyph', () => {
    test('glyphbycp_a', () => {
      expect(font.glyphbycp(97).meta).toEqual(glyph_a_meta)
    })

    test('glyph_a', () => {
      expect(font.glyph('a').meta).toEqual(glyph_a_meta)
    })

    test('glyphbycp_nonexistent', () => {
      expect(font.glyphbycp(22909)).toEqual(null)
    })

    test('glyph_nonexistent', () => {
      expect(font.glyph('好')).toEqual(null)
    })

    test('lacksglyphs', () => {
      expect(font.lacksglyphs('Bé H好Δi的')).toEqual(['好', 'Δ'])
    })

    test('lacksglyphs_none', () => {
      expect(font.lacksglyphs('Bé Hi的')).toEqual(null)
    })
  })
})
